---
title: "Leaf area standardized protocol"
format: html
editor: visual
author: Nadine Arzt
date: last-modified
bibliography: references.bib
echo: true
output: false
eval: false
---

## Protocol to calculate leaf area

This is an addition to the PFTC teaching material: <https://plant-functional-trait-course.github.io/PFTC_teaching_material/5_trait_collection.html>

#### 1. Scan the leaf

Clean the scanner surface to avoid debris in the scan and place the leaf upside down on the scanner. Use a Raspberry Pi to ensure standardized labeling and correct setting of all images.

Scanner settings:

-   *Type: JPEG*

-   *Color*

-   *Full color range*

-   *300dpi*

#### 2. Folder with scans

Save a folder with your scanned images. Divide it into several sub folders if you have many images.

![Example of leaf scan (*Pimpinella saxifraga*) with scale](Leaf_scans/FOD5208.jpeg){fig-align="left" width="9cm"}

#### 3. Calculate leaf area using ImageJ

##### Load function

Function to measure leaf area using the image processing software [ImageJ](https://imagej.net/ij/). Download the software and necessary packages. Run the function run.ij in a separate R script first.

```{r}
run.ij <- function(path.imagej = NULL,
                   set.memory = 4,
                   set.directory,
                   distance.pixel = 826,
                   known.distance = 21,
                   trim.pixel = 20,
                   trim.pixel.right = 0,
                   trim.pixel.top = 0,
                   low.circ = 0,
                   upper.circ = 1,
                   low.size = 0.7,
                   upper.size = "Infinity",
                   prefix = "\\.|-",
                   log = F,
                   check.image = F,
                   save.image = F){
  
  file.list <- list.files(set.directory, recursive = TRUE, full.names = TRUE, pattern = ".jpeg$|.jpg$|.tif$|.tiff$", ignore.case = TRUE)
  
  if (length(file.list) == 0) return("No images in the directory")
  
  temp.slash <- substr(set.directory,nchar(set.directory),nchar(set.directory))
  if(temp.slash!="/" & temp.slash!="\\"){
    set.directory <- paste(set.directory,"/",sep="")
  }
  
  circ.arg <- paste(low.circ,upper.circ,sep="-")
  size.arg <- paste(low.size,upper.size,sep="-")
  
  
  os <-.Platform$OS.type
  if (is.null(path.imagej)){
    imagej <- find.ij(ostype = .Platform$OS.type)
    if(imagej == "ImageJ not found"){
      return("ImageJ not found")
    }else{
      path.imagej <- imagej
    }
  }
  
  
  ##additional check
  if (os=="windows"){
    #slash is replaced by backslash because they don't work in batch
    path.imagej <- gsub("/","\\\\",path.imagej)
    
    if(!file.exists(paste(path.imagej,"ij.jar",sep="")) & !file.exists(paste(path.imagej,"ij.jar",sep="/"))) {
      warning("ij.jar was not found. Specify the correct path to ImageJ directory or reinstall ImageJ bundled with Java")
      return("ImageJ not found")
    }  else if (!file.exists(paste(path.imagej,"jre/bin/java.exe",sep="")) & !file.exists(paste(path.imagej,"jre/bin/java.exe",sep="/"))) {
      warning("java was not found. Specify the correct path to ImageJ directory or reinstall ImageJ bundled with Java")
      return("ImageJ not found")
    }
  } else {
    unix.check <- Sys.info()["sysname"]
    if(unix.check=="Linux") {
      if(!file.exists(paste(path.imagej, "ij.jar",sep="")) & !file.exists(paste(path.imagej, "ij.jar", sep="/"))) {
        warning("Specify the correct path to directory that contains ImageJ.app and ij.jar")
        return("ImageJ not found")
      }
    } else if (unix.check == "Darwin"){
      if(!file.exists(paste(path.imagej, "Contents/Java/ij.jar", sep = "")) & !file.exists(paste(path.imagej, "Contents/Java/ij.jar", sep = "/"))) {
        warning("Specify the correct path to ImageJ.app")
        return("ImageJ not found")
      }
      
    }
  }
  
  
  if (os == "windows"){temp <- paste(tempdir(),"\\",sep="")
  temp <- gsub("\\\\","\\\\\\\\",temp)} else {temp <- paste(tempdir(),"/",sep="")
  }
  
  macro <- paste0('dir = getArgument;
                   \n dir2 = "', temp,
                  '";\n list = getFileList(dir);
                      \n open(dir + list[0]);
                      \n run("Set Scale...","distance=', distance.pixel,
                  ' known=', known.distance,
                  ' pixel=1 unit=cm global");
                  \n for (i=0;\n i<list.length;\n i++) { open(dir + list[i]);
                    \n', ' width = getWidth() - ', trim.pixel,
                  
                  ' ;\n height = getHeight() -',trim.pixel,
                  
                  ' ;\n run("Canvas Size...", "width=" + width + " height=" + height + " position=Bottom-Center");\n',
                  ' ;\n width2 = getWidth() - ', trim.pixel.right
                  ,
                  ' ;\n run("Canvas Size...", "width=" + width + " height=" + height + " position=Bottom-Center");\n',
                  ' ;\n height2 = getHeight() - ', trim.pixel.top,
                  
                  ' ;\n run("Canvas Size...", "width=" + width2 + " height=" + height2 + " position=Bottom-Left");\n',
                  ' run("8-bit");\n run("Threshold...");\n setAutoThreshold("Minimum");\n',
                  ' run("Analyze Particles...", "size=',size.arg,
                  ' circularity=',circ.arg,
                  ' show=Masks display clear record");\n saveAs("Measurements", dir2+list[i]+".txt");\n',
                  ' saveAs("tiff", dir+list[i]+ "_mask.tif");\n')
  if(save.image){
    macro <- paste0(macro, '}')
  } else {
    macro <- paste0(macro, 'saveAs("Measurements", dir2+list[i]+".txt");\n}')
  }
  
  
  
  #prepare macro***.txt as tempfile
  tempmacro <- paste(tempfile('macro'),".txt",sep="")
  
  write(macro, file=tempmacro)
  # write(macro, file="~/Desktop/moge.txt")
  # pathimagej <- system.file("java",package="LeafArea")
  
  if(check.image) {
    exe <- "-macro "
    wait = FALSE} else {
      exe <- "-batch "
      wait = TRUE}
  
  #use it in imageJ
  if (os == "windows"){
    
    if (length(strsplit(set.directory," ")[[1]]) >1) {
      bat <- paste("pushd ", path.imagej, "\n jre\\bin\\java -jar -Xmx",set.memory,"g ij.jar ",exe ,tempmacro, ' "',set.directory,'"\n pause\n exit',sep="")
    } else bat <- paste("pushd ", path.imagej, "\n jre\\bin\\java -jar -Xmx",set.memory,"g ij.jar ",exe ,tempmacro," ",set.directory,"\n pause\n exit",sep="")
    
    tempbat <- paste(tempfile('bat'),".bat",sep="")
    
    write(bat, file=tempbat)
    
    shell(tempbat,wait=wait)
    
  } else {
    temp.slash2 <- substr(path.imagej,nchar(path.imagej),nchar(path.imagej))
    if(temp.slash2!="/" ){
      path.imagej <- paste(path.imagej,"/",sep="")
    }
    
    # this allows space in path
    set.directory <- gsub(" ", "\\ ", set.directory, fixed=TRUE)
    
    unix.check <- Sys.info()["sysname"]
    if(unix.check == "Linux") {
      system(paste("java -Xmx", set.memory, "g -jar ",path.imagej,"ij.jar -ijpath ",path.imagej," ",exe,tempmacro," ", set.directory, sep = ""), wait = wait)
    } else {system(paste("java -Xmx", set.memory, "g -jar ", path.imagej, "Contents/Java/ij.jar -ijpath ", path.imagej, " ", exe, tempmacro, " ", set.directory, sep = ""), wait = wait)
    }
  }
  
  # system(paste("java -Xmx",set.memory,"g -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ ",exe,tempmacro," ",set.directory,sep=""),wait=wait)
  # system(paste("java -Xmx",set.memory,"g -jar ", pathimagej, "/ij.jar  -macro ",tempmacro," ",set.directory,sep=""),wait=F)
  
  
  #kill imageJ
  if(check.image){
    ans <- readline("Do you want to close ImageJ? Press any keys when you finish cheking analyzed images.")
    if (os == "windows") suppressWarnings(shell('taskkill /f /im "java.exe"')) else system("killall java")
  }
  
  # file managemanet
  res <- resmerge.ij(path=temp,prefix=prefix)
  
  if (log) res2 <- readtext.ij(path=temp)
  
  # unlink
  cd <- getwd()
  setwd(temp)
  unlink(list.files(temp))
  setwd(cd)
  
  if (log) return(list(summary=res,each.image=res2)) else return(res)
  
}

```

##### Loop through all images to get leaf area

Load the necessary packages LeafArea [@Katabuchi2015] and tidyverse [@Wickham2019]. LeafArea originates from [mattocci27](https://github.com/mattocci27/LeafArea) and was adapted from [Richard Telford](https://github.com/richardjtelford/LeafArea) and [Brian Maitner](https://github.com/bmaitner/LeafArea). Then run the function to loop through all images in a folder automatically. The path to ImageJ has to be complete even if you are working within an R project.

```{r}
# load packages -----------------------------------------------------------
# install.packages("devtools")
# devtools::install_github("mattocci27/LeafArea")
library(LeafArea)
library(tidyverse)

# Function to run several files -------------------------------------------

loop.files <-  function(files){
  file.copy(files, new.folder)
  if(grepl("-NA$", files)){
    newfile <- basename(files)
    file.rename(paste0(new.folder, "/", newfile), paste0(new.folder,
                                                         "/", gsub("-NA$", "", newfile)))
  }
  print(files)
  area <- try(run.ij(path.imagej = "C:/Users/naart3294/OneDrive - University of Bergen/Desktop/ImageJ/", set.directory = new.folder, distance.pixel = 237, known.distance = 2, log = TRUE, low.size = 0.005, trim.pixel = 60, trim.pixel.right = 150, save.image = TRUE))
  # more cropping
  #area <- try(run.ij(set.directory = new.folder, distance.pixel = 237, known.distance = 2, log = TRUE, low.size = 0.005, trim.pixel = 200, trim.pixel2 = 0, save.image = TRUE))
  if(inherits(area, "try-error")){
    return(data.frame(LeafArea = NA))
  }
  file.copy(dir(new.folder, full.names = TRUE, pattern = "\\.tif"), output.folder)
  Sys.sleep(0.1)
  if(any(!file.remove(dir(new.folder, full.names = TRUE) ))) stop()
  res <- data.frame(dir = dirname(files), ID = names(unlist(area[[2]])), LeafArea = (unlist(area[[2]])))
  return(res)
}

# new.folder is temporary and stays the same for every folder with scans
new.folder <- "C:/Users/naart3294/OneDrive - University of Bergen/PhD_RangeX/R codes/Leaf_area_standardized_protocol/temp"


# test run.ij ----------------------------------------------------------------

# dd <- run.ij(path.imagej = "C:/Users/naart3294/OneDrive - University of Bergen/Desktop/ImageJ/", set.directory = "C:/Users/naart3294/OneDrive - University of Bergen/PhD_RangeX/R codes/Leaf_area_standardized_protocol/Leaf_scans/", distance.pixel = 237, known.distance = 2, log = TRUE, low.size = 0.1, trim.pixel = 58, trim.pixel.right = 150, save.image = TRUE)
# dd$summary

```

```{r}
# make a list of files, temporary folder and output folder

# always run this list.of.files first
list.of.files <- dir(path = paste0("Leaf_scans/"), pattern = "jpeg|jpg", recursive = TRUE, full.names = TRUE)

# create a different output folder for every folder of scans
output.folder <- "C:/Users/naart3294/OneDrive - University of Bergen/PhD_RangeX/R codes/Leaf_area_standardized_protocol/Output/"

# this does the magic of calculating the leaf area for all scans in the specified folder
LA <- plyr::ldply(list.of.files, loop.files)
LA

# write.csv(LA_1, file = "Raw_functional_traits_leaf_area.csv")
```

##### Calculate leaf area per leaf and check for duplicates

```{r}
# calculate sums
leaf_area <- LA |>
  # extract everything before point
  mutate(ID = sub("\\..*", "", ID)) |>
  group_by(dir, ID) |>
  summarise(n = n(),
            leaf_area = sum(LeafArea))
# save data as csv
# write.csv(leaf_area, file = "leaf_area.csv")

dim(leaf_area)

head(leaf_area)
table(leaf_area$ID)


# check for duplicates ----------------------------------------------------
duplicates <- leaf_area[duplicated(leaf_area$ID), ]
duplicates
```

```{r}
#| eval: false
#| include: false
library(magick)
img <- image_read("Output/FOD5208.jpeg_mask.tif")
image_write(img, "Output/FOD5208_mask.jpeg", format = "jpeg")

```

![Example output file (*Pimpinella saxifraga*)](Output/FOD5208_mask.jpeg){fig-align="left" width="9cm"}

#### 4. What if the output file doesn't look good?

```{r}
#| eval: false
#| include: false
img_2 <- image_read("Output/GCU0786.jpeg_mask.tif")
image_write(img_2, "Output/GCU0786_mask.jpeg", format = "jpeg")
```

ImageJ has not picked up the whole leaf area because part of the petiole is white.

![Succisa pratensis original scan and output file](Leaf_scans/GCU0786.jpeg){width="6cm"} ![Second Image](Output/GCU0786_mask.jpeg){width="5.6cm"}

*Succisa pratensis* orignal scan and output file
